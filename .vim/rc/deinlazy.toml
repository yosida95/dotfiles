[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1

hook_source = 'source ~/.vim/rc/plugins/neocomplete.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ['Unite']

hook_add = '''
    nmap <buffer> <ESC> <Plug>(unite_exit)
    autocmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif

    noremap <C-B> :Unite buffer<CR>
    noremap <C-F> :Unite file file/new<CR>
'''

hook_source = '''
    let g:unite_update_time = 100
    let g:unite_enable_start_insert = 1
    let g:unite_winheight = 15
    let g:unite_enable_auto_select = 0
    let g:unite_force_overwrite_statusline = 0
    au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
    au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = [['n', '<Plug>']]
on_if = "isdirectory(bufname('%'))"

hook_add = '''
    nnoremap <leader>e :VimFilerExplorer -winwidth=40<CR>
'''

hook_source = '''
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_force_overwrite_statusline = 0
    let g:vimfiler_ignore_pattern = [
        \ '^\.\(.*_\)\?cache$',
        \ '^\.git', '^\.hg',
        \ '^__pycache__$', '\.pyc$', '^\.tox$', '^\.venv$']
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'vimproc.vim'

hook_source = '''
    let g:quickrun_config = {
        \ '_': {
        \     'runner': 'vimproc',
        \     'runner/vimproc/updatetime': 50,
        \ },
        \ '*': {
        \     'runmode': 'async:remote:vimproc',
        \     'split': 'below',
        \ }}
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = 'TagbarToggle'

hook_add = '''
    nmap <F8> :TagbarToggle<CR>
'''

hook_source = '''
    let g:tagbar_status_func = 'TagbarStatusFunc'
    function! TagbarStatusFunc(current, sort, fname, ...) abort
        let g:lightline.fname = a:fname
        return lightline#statusline(0)
    endfunction
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = [
    'vimproc.vim',
    'vim-quickrun',
    'shabadou.vim',
    'vim-hier',
    'quickfixstatus',
]
on_ft = ['go', 'java', 'python', 'rust', 'scala', 'sh', 'zsh']

hook_source = '''
    let g:watchdogs_check_BufWritePost_enable = 1
    let g:watchdogs_check_CursorHold_enable = 1

    let g:quickrun_config['watchdogs_checker/_'] = {
        \ 'outputter/quickfix/open_cmd' : '',
        \ }
    let g:quickrun_config['go/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/go_vet',
        \ }
    let g:quickrun_config['java/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/javac',
        \ }
    let g:quickrun_config['python/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/flake8',
        \ }
    let g:quickrun_config['rust/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/rustc',
        \ }
    let g:quickrun_config['scala/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/scalac',
        \ }
    let g:quickrun_config['sh/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/sh',
        \ }
    let g:quickrun_config['zsh/watchdogs_checker'] = {
        \ 'type': 'watchdogs_checker/zsh',
        \ }
'''
hook_post_source = 'call watchdogs#setup(g:quickrun_config)'

[[plugins]]
repo = 'google/vim-maktaba'

[[plugins]]
repo = 'google/vim-glaive'
depends = [
    'vim-maktaba',
]

hook_source = '''
    call glaive#Install()
'''

[[plugins]]
repo = 'google/vim-codefmt'
depends = [
    'vim-glaive',
]
on_cmd = ['AutoFormatBuffer', 'FormatCode']

hook_add = '''
    autocmd FileType java AutoFormatBuffer google-java-format
'''

hook_source = '''
    Glaive codefmt plugin[mappings]
    Glaive codefmt google_java_executable="java -jar /home/yosida95/.local/lib/google-java-format-1.7-all-deps.jar"
'''

[[plugins]]
repo = 'vim-scripts/abnf'
on_ft = 'abnf'

[[plugins]]
repo = 'mhaig/vim-blockdiag-series'
on_ft = ['actdiag', 'blockdiag', 'nwdiag', 'packetdiag', 'rackdiag', 'seqdiag']

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee', 'markdown']

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
on_ft = 'dart'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = 'Dockerfile'

[[plugins]]
repo = 'vim-erlang/vim-erlang-compiler'
on_ft = 'erlang'

[[plugins]]
repo = 'vim-erlang/vim-erlang-omnicomplete'
on_ft = 'erlang'

[[plugins]]
repo = 'vim-erlang/vim-erlang-runtime'
on_ft = 'erlang'

[[plugins]]
repo =  'fatih/vim-go'
rev = 'v1.19'

on_ft = ['go', 'gohtmltmpl', 'gotexttmpl', 'markdown']

hook_add = '''
    autocmd InsertLeave * if pumvisible() == 0| pclose| endif
'''
hook_source = '''
  let g:go_highlight_extra_types = 1
'''

[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

[[plugins]]
repo = 'estin/htmljinja.git'
on_ft = 'htmljinja'

[[plugins]]
repo = 'vim-scripts/iptables'
on_ft = 'iptables'

[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
rev = 'v2.4.0'
on_ft = 'java'

hook_source = '''
    let g:JavaComplete_ImportDefault = -1
    let g:JavaComplete_ImportSortType = 'packageName'
    let g:JavaComplete_StaticImportsAtTop = 1
    let g:JavaComplete_ImportOrder = ['*']
'''

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

hook_source = '''
    let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'vim-scripts/mako.vim'
on_ft = 'mako'

[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = 'nginx'

[[plugins]]
repo = 'uarun/vim-protobuf'
on_ft = ['proto', 'markdown']

[[plugins]]
repo = 'vim-scripts/python.vim'
on_ft = 'python'

[[plugins]]
repo = 'davidhalter/jedi-vim'
rev = '0.9.0'
on_ft = 'python'

hook_source = '''
    let g:jedi#auto_initialization = 1
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#completions_enabled = 0

    let g:jedi#rename_command = '<Leader>R'
'''

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = 'python'

[[plugins]]
repo = 'Rykka/riv.vim'
on_ft = 'rst'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

hook_source = '''
    let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'

hook_add = '''
    au FileType rust nmap gd <Plug>(rust-def)
    au FileType rust nmap gs <Plug>(rust-def-split)
    au FileType rust nmap gx <Plug>(rust-def-vertical)
    au FileType rust nmap <leader>gd <Plug>(rust-doc)
'''

hook_source = '''
    let g:racer_experimental_completer = 1
'''

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

[[plugins]]
repo = 'duganchen/vim-soy'
on_ft = 'soy'

[[plugins]]
repo = 'Matt-Deacalion/vim-systemd-syntax'
on_ft = 'systemd'

[[plugins]]
repo = 'tmux-plugins/vim-tmux'
on_ft = 'tmux'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
