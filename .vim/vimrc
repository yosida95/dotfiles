""""""""""""""""""""
" Initialize:
""""""""""""""""""""
if &compatible
  set nocompatible
endif

function! s:source_rc(path, ...) abort
  let abspath = resolve(expand('~/.vim/rc/' . a:path))
  execute 'source' fnameescape(abspath)
endfunction

augroup MyAutoCmd
  autocmd!
augroup END

" Backup
set backup
set backupdir=$HOME/.cache/vimbackup/
" Swap
set swapfile
set directory=$HOME/.cache/vimswap//
" Undo
set undofile
set undodir=$HOME/.cache/vimundo/

set secure


""""""""""""""""""""
" Encodings:
""""""""""""""""""""
if has('vim_starting') && &encoding !=# 'utf-8'
  set encoding=utf-8
endif
set fileencodings='ucs-bom,utf-8,euc-jp,iso-2022-jp-3,sjis,cp932'

set fileformat=unix
set fileformats=unix,mac,dos


""""""""""""""""""""
" vim-plug:
""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.cache/vim-plug')

Plug 'editorconfig/editorconfig-vim', { 'tag': 'v1.1.1' }

Plug 'vim-scripts/sudo.vim'

Plug 'sainnhe/sonokai'

Plug 'tpope/vim-abolish'

Plug 'itchyny/lightline.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'maximbaz/lightline-ale'
call s:source_rc('plugins/lightline.vim')

Plug 'osyo-manga/vim-precious'
  Plug 'Shougo/context_filetype.vim'

Plug 'triglav/vim-visual-increment'

Plug 'tpope/vim-surround'

Plug 'ctrlpvim/ctrlp.vim'
  Plug 'mattn/ctrlp-matchfuzzy'

Plug 'Shougo/echodoc.vim'
let g:echodoc_enable_at_startup = 1

Plug 'lambdalisue/fern.vim', { 'tag': 'v1.51.3' }
  Plug 'lambdalisue/fern-mapping-project-top.vim'

Plug 'dense-analysis/ale', { 'tag': 'v3.3.0' }

Plug 'prabirshrestha/asyncomplete.vim', { 'commit': '9c7651894c2c6d656c0dc71e87cfabbbb71b9c78' }
  Plug 'prabirshrestha/asyncomplete-file.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'yami-beta/asyncomplete-omni.vim'

Plug 'prabirshrestha/vim-lsp', { 'commit': 'e74bd3c986484845a4b87e5aa013773d52030a75' }
  Plug 'prabirshrestha/async.vim'
  Plug 'mattn/vim-lsp-settings'
  Plug 'rhysd/vim-lsp-ale'

" ABNF
Plug 'vim-scripts/abnf'

" ActionScript
Plug 'inside/actionscript.vim'

" Ansible
Plug 'pearofducks/ansible-vim'

" AppleScript
Plug 'mityu/vim-applescript'

" blockdiag
Plug 'mhaig/vim-blockdiag-series'

" CSV
Plug 'chrisbra/csv.vim', { 'for': ['csv'] }

" Dart
Plug 'dart-lang/dart-vim-plugin', { 'for': ['dart'] }

" Docker
Plug 'ekalinin/Dockerfile.vim'

" Erlang
Plug 'vim-erlang/vim-erlang-compiler', { 'for': ['erlang'] }
Plug 'vim-erlang/vim-erlang-omnicomplete', { 'for': ['erlang'] }
Plug 'vim-erlang/vim-erlang-runtime'

" Git
Plug 'tpope/vim-git'

" Go
Plug 'fatih/vim-go', { 'tag': 'v1.26' }

" HCL
Plug 'jvirtanen/vim-hcl', { 'branch': 'main' }

" HTML
Plug 'othree/html5.vim'
Plug 'mattn/emmet-vim'

" iptables
Plug 'vim-scripts/iptables'

" Java/Scala
Plug 'derekwyatt/vim-scala', { 'for': ['scala'] }
Plug 'tfnico/vim-gradle'
Plug 'derekwyatt/vim-sbt'

" JavaScript
Plug 'pangloss/vim-javascript'

" JSON
Plug 'elzr/vim-json'
Plug 'GutenYe/json5.vim'

" logrotate
Plug 'moon-musick/vim-logrotate'

" Lua
Plug 'tbastos/vim-lua'

" Markdown
Plug 'plasticboy/vim-markdown'

" NGINX
Plug 'chr4/nginx.vim'

" PHP
Plug 'StanAngeloff/php.vim'

" PostgreSQL
Plug 'lifepillar/pgsql.vim'

" Protobuf
Plug 'uarun/vim-protobuf'

" Python
Plug 'vim-python/python-syntax'
Plug 'sophacles/vim-bundle-mako'
Plug 'Glench/Vim-Jinja2-Syntax'

" reStructuredText
Plug 'Rykka/riv.vim', { 'for': ['rst'] }

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'keith/rspec.vim'

" Rust
Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
Plug 'racer-rust/vim-racer'

" systemd
Plug 'Matt-Deacalion/vim-systemd-syntax'

" tmux
Plug 'tmux-plugins/vim-tmux'

" TOML
Plug 'cespare/vim-toml', { 'branch': 'main' }

call plug#end()


""""""""""""""""""""
" Search:
""""""""""""""""""""
set ignorecase
set smartcase
set incsearch
set hlsearch

nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'
nmap <Esc><Esc> :noh<CR>


""""""""""""""""""""
" Edit:
""""""""""""""""""""
set expandtab
set smarttab
set tabstop=2
set shiftwidth=2
set shiftround

set autoindent
set smartindent
" http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash
inoremap # X<BS>#

set showmatch
" a showmatch will wait half a second or until a character is typed
set cpoptions-=m
set matchtime=3 " 0.3 secs
" set matchpairs& matchpairs+=<:>

set backspace=indent,eol,start
set completeopt=menuone,noinsert,noselect
set virtualedit=block

set autowrite
set hidden
set infercase
set modeline

" bases Vim will consider for numbers when using Ctrl-A/Ctrl-X
set nrformats=octal,hex

autocmd MyAutoCmd InsertLeave * if &paste | setlocal nopaste | echo 'nopaste' | endif
autocmd MyAutoCmd InsertLeave * if &l:diff | diffupdate | endif


""""""""""""""""""""
" Display:
""""""""""""""""""""

" https://vim-jp.org/vimdoc-ja/term.html#tmux-integration
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
  " よりよいマウスサポート、:help 'ttymouse' を参照
  set ttymouse=sgr

  " フルカラー有効、:help xterm-true-color を参照
  let &termguicolors = v:true
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

  " bracketed paste モード有効、:help xterm-bracketed-paste を参照
  let &t_BE = "\<Esc>[?2004h"
  let &t_BD = "\<Esc>[?2004l"
  let &t_PS = "\<Esc>[200~"
  let &t_PE = "\<Esc>[201~"

  " フォーカスイベントの追跡有効、:help xterm-focus-event を参照
  let &t_fe = "\<Esc>[?1004h"
  let &t_fd = "\<Esc>[?1004l"
  execute "set <FocusGained>=\<Esc>[I"
  execute "set <FocusLost>=\<Esc>[O"

  " 修飾ありカーソルキー有効、:help arrow_modifiers を参照
  execute "silent! set <xUp>=\<Esc>[@;*A"
  execute "silent! set <xDown>=\<Esc>[@;*B"
  execute "silent! set <xRight>=\<Esc>[@;*C"
  execute "silent! set <xLeft>=\<Esc>[@;*D"
endif

" colorscheme
let g:sonokai_style = 'default'
let g:sonokai_transparent_background = 1
let g:sonokai_disable_italic_comment = 1
let g:sonokai_diagnostic_text_highlight = 1
let g:sonokai_diagnostic_line_highlight = 1

colorscheme sonokai

" list
set list
set listchars=tab:»-,trail:-,extends:»,precedes:«,eol:$,nbsp:%

" messages
set shortmess=tcI
set noshowmode

" cursorline
autocmd MyAutoCmd CursorMoved,CursorMovedI,WinLeave * setlocal nocursorline
autocmd MyAutoCmd CursorHold,CursorMovedI * setlocal cursorline

set cmdheight=2
set colorcolumn=80
set laststatus=2
set nowrap
set number
set signcolumn=yes


""""""""""""""""""""
" .vimrc.local:
""""""""""""""""""""
augroup vimrc-local
  autocmd!
  autocmd BufNewFile,BufReadPost * call s:vimrc_local(expand('<afile>:p:h'))
augroup END

function! s:vimrc_local(loc)
  let files = findfile('.vimrc.local', escape(a:loc, ' ') . ';', -1)
  for i in reverse(filter(files, 'filereadable(v:val)'))
    source `=i`
  endfor
endfunction


""""""""""""""""""""
" fern.vim
""""""""""""""""""""
let g:fern#default_exclude = '\v(
      \^(\.((.+[-_])?cache|coverage.*|git|hg|next|tox|venv|DS_Store)|
      \__pycache__|node_modules|vendor|wheelhouse)|
      \\.(egg-info|pyc))$'
let g:fern#default_hidden = 1

let g:fern#disable_default_mappings = 1

function! s:init_fern() abort
  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)

  nmap <buffer> ^ <Plug>(fern-action-project-top)
  nmap <buffer> ! <Plug>(fern-action-hidden)
  nmap <buffer> <CR> <Plug>(fern-action-open-or-enter)
  nmap <buffer> <BS> <Plug>(fern-action-leave)
  nmap <buffer> <C-L> <Plug>(fern-action-reload)
  nmap <buffer> p <Plug>(fern-action-focus:parent)

  nmap <buffer> fi <Plug>(fern-action-include)
  nmap <buffer> fe <Plug>(fern-action-exclude)

  nmap <buffer> h <Plug>(fern-action-collapse)
  nmap <buffer> l <Plug>(fern-action-open-or-expand)
  nmap <buffer> o <Plug>(fern-action-open)
  nmap <buffer> y <Plug>(fern-action-yank)

  nmap <buffer> K <Plug>(fern-action-new-dir)
  nmap <buffer> N <Plug>(fern-action-new-file)
  nmap <buffer> Y <Plug>(fern-action-new-path)

  nmap <buffer> <space> <Plug>(fern-action-mark)
  nmap <buffer> U <Plug>(fern-action-mark:clear)
  nmap <buffer> c <Plug>(fern-action-copy)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> r <Plug>(fern-action-rename)

  nmap <buffer> z <Plug>(fern-action-zoom)
  nmap <buffer> Z <Plug>(fern-action-zoom:reset)

  nmap <buffer> <C-C> <Plug>(fern-action-cancel)
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END

" https://github.com/lambdalisue/fern.vim/issues/236#issuecomment-703345436
function! s:fern_reveal() abort
  if &modifiable || filereadable(expand('%'))
    return printf('FernDo FernReveal %s', expand('%:p'))
  endif
endfunction

nnoremap <silent> <Leader>e :Fern . -drawer -reveal=% -toggle<CR>
nnoremap <silent> <Leader>f :<C-R>=<SID>fern_reveal()<CR><CR>


""""""""""""""""""""
" ctrlpvim/ctrlp.vim
""""""""""""""""""""
if has('patch-8.2-1665')
  let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}
endif

let g:ctrlp_match_window = 'top,order:btt,min:15,max:15'

" determine the starting directory in order of the project root of the current
" directory, the directory of the current file.
let g:ctrlp_working_path_mode = 'ra'
" include the current file in the search result.
let g:ctrlp_match_current_file = '1'
" Exit on <BS>.
let g:ctrlp_brief_prompt = '1'
" Open the newly created file in the current window.
let g:ctrlp_open_new_file = 'r'
" When opening a file, move to the window in another tab with <C-t> if the file
" is already opening in that window instead of newly opening it.
let g:ctrlp_switch_buffer = 't'

let g:ctrlp_show_hidden = 1
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_custom_ignore = '\v(
      \/(\.((.+[-_])?cache|coverage.*|eggs|git|hg|next|tox|venv|DS_Store)|
      \__pycache__|node_modules|vendor|wheelhouse|_build)|
      \\.(egg-info|pyc))$'

let g:ctrlp_extensions = ['quickfix']


""""""""""""""""""""
" prabirshrestha/asyncomplete.vim
""""""""""""""""""""
let g:asyncomplete_auto_completeopt = 0


""""""""""""""""""""
" prabirshrestha/vim-lsp:
""""""""""""""""""""
let g:lsp_fold_enabled = 0
let g:lsp_use_native_client = 1
let g:lsp_semantic_enabled = 0
let g:lsp_format_sync_timeout = 1000

let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_document_highlight_enabled = 1

highlight lspReference ctermfg=lightgreen

function! s:on_lsp_buffer_enabled() abort
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)

  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)

  nmap <buffer> <f2> <plug>(lsp-rename)
  nmap <buffer> K <plug>(lsp-hover)
endfunction

autocmd MyAutoCmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()


""""""""""""""""""""
" mattn/vim-lsp-settings:
""""""""""""""""""""
let g:lsp_settings_filetype_python = 'pylsp'

" https://github.com/golang/go/issues/40871
let g:lsp_text_edit_enabled = 0


""""""""""""""""""""
" ale:
""""""""""""""""""""
let g:ale_completion_enabled = 0

let g:ale_echo_cursor = 1
let g:ale_sign_column_always = 1
let g:ale_cursor_detail = 0
let g:ale_virtualtext_cursor = 0

let g:ale_fix_on_save = 1

" Not run lint on opening files.
let g:ale_lint_on_enter = 0
" Run lint on leaving insert mode.
let g:ale_lint_on_insert_leave = 1
" Run lint on TextChanged event, but not on TextChangedI.
let g:ale_lint_on_text_changed = 'normal'

let g:ale_c_clangformat_executable = 'clang-format-8'


""""""""""""""""""""
" asyncomplete.vim:
""""""""""""""""""""
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
  \ 'name': 'file',
  \ 'allowlist': ['*'],
  \ 'blocklist': [],
  \ 'priority': 10,
  \ 'completor': function('asyncomplete#sources#file#completor')
  \ }))

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
  \ 'name': 'omni',
  \ 'allowlist': ['*'],
  \ 'blocklist': ['c', 'cpp', 'html', 'sql'],
  \ 'completor': function('asyncomplete#sources#omni#completor')
  \  }))

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <CR>    pumvisible() ? asyncomplete#close_popup() : "\<CR>"


""""""""""""""""""""
" vim-go:
""""""""""""""""""""
let g:go_gopls_enabled = 0
let g:go_gopls_options = [ '-remote=auto' ]

let g:go_code_completion_enabled = 0
let g:go_echo_command_info = 0

let g:go_def_mapping_enabled = 0
let g:go_textobj_enabled = 0

let g:go_template_autocreate = 1
let g:go_template_use_pkg = 1

" linters and fiers will be run by ale.
let g:go_fmt_autosave = 0
let g:go_asmfmt_autosave = 0
let g:go_imports_autosave = 0
let g:go_metalinter_autosave = 0
let g:go_mod_fmt_autosave = 0


""""""""""""""""""""
" vim-json:
""""""""""""""""""""
let g:vim_json_syntax_conceal = 0


""""""""""""""""""""
" vim-markdown
""""""""""""""""""""
let g:markdown_fenced_languages = [
  \ 'css',
  \ 'erb=eruby.html',
  \ 'go',
  \ 'html',
  \ 'javascript',
  \ 'js=javascript',
  \ 'json=javascript',
  \ 'proto',
  \ 'python',
  \ 'ruby',
  \ 'sass',
  \ 'sh',
  \ 'xml',
  \ ]


""""""""""""""""""""
" vim-python/python-syntax:
""""""""""""""""""""
let g:python_highlight_builtin_funcs_kwarg = 0
let g:python_highlight_indent_errors = 0
let g:python_highlight_space_errors = 0
let g:python_highlight_func_calls = 0
let g:python_highlight_all = 1  " enable all highlighting except for the above


""""""""""""""""""""
" riv.vim:
""""""""""""""""""""
let g:riv_file_link_style = 2 " Sphinx

let g:riv_disable_folding = 0
let g:riv_fold_level = 1  " Sections
let g:riv_fold_blank = 1  " fold all blank lines, show one if more than one.

let g:riv_auto_format_table = 0


""""""""""""""""""""
" rust.vim:
""""""""""""""""""""
let g:rustfmt_autosave = 1


""""""""""""""""""""
" vim-racer:
""""""""""""""""""""
let g:racer_experimental_completer = 1

autocmd FileType rust nmap gd <Plug>(rust-def)
autocmd FileType rust nmap gs <Plug>(rust-def-split)
autocmd FileType rust nmap gv <Plug>(rust-def-vertical)
autocmd FileType rust nmap <leader>gd <Plug>(rust-doc)
