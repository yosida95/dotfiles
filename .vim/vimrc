""""""""""""""""""""
" Initialize:
""""""""""""""""""""
if &compatible
  set nocompatible
endif

function! s:source_rc(path, ...) abort
    let abspath = resolve(expand('~/.vim/rc/' . a:path))
    execute 'source' fnameescape(abspath)
endfunction

augroup MyAutoCmd
    autocmd!
augroup END

" Backup
set backup
set backupdir=$HOME/.cache/vimbackup/
" Swap
set swapfile
set directory=$HOME/.cache/vimswap//
" Undo
set undofile
set undodir=$HOME/.cache/vimundo/

set secure


""""""""""""""""""""
" Encodings:
""""""""""""""""""""
if has('vim_starting') && &encoding !=# 'utf-8'
    set encoding=utf-8
endif
set fileencodings='ucs-bom,utf-8,euc-jp,iso-2022-jp-3,sjis,cp932'

set fileformat=unix
set fileformats=unix,mac,dos


""""""""""""""""""""
" vim-plug:
""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.cache/vim-plug')

Plug 'vim-scripts/sudo.vim'

Plug 'w0ng/vim-hybrid'

Plug 'tpope/vim-abolish'

Plug 'itchyny/lightline.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'maximbaz/lightline-ale'
call s:source_rc('plugins/lightline.vim')

Plug 'osyo-manga/vim-precious'
  Plug 'Shougo/context_filetype.vim'

Plug 'triglav/vim-visual-increment'

Plug 'tpope/vim-surround'

Plug 'Shougo/echodoc.vim'
let g:echodoc_enable_at_startup = 1

Plug 'mattn/sonictemplate-vim'

Plug 'Shougo/unite.vim'

Plug 'Shougo/vimfiler.vim'

Plug 'Shougo/vimproc.vim', { 'do': 'make' }

Plug 'thinca/vim-quickrun'

Plug 'dense-analysis/ale', { 'tag': 'v2.7.0' }

Plug 'prabirshrestha/asyncomplete.vim', { 'tag': 'v2.1.0' }
  Plug 'prabirshrestha/asyncomplete-file.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'yami-beta/asyncomplete-omni.vim'

Plug 'prabirshrestha/vim-lsp'
  Plug 'prabirshrestha/async.vim'
  Plug 'mattn/vim-lsp-settings'

" ABNF
Plug 'vim-scripts/abnf'

" ActionScript
Plug 'inside/actionscript.vim'

" Ansible
Plug 'pearofducks/ansible-vim'

" AppleScript
Plug 'mityu/vim-applescript'

" blockdiag
Plug 'mhaig/vim-blockdiag-series'

" Coffee
Plug 'kchmck/vim-coffee-script'

" CSV
Plug 'chrisbra/csv.vim', { 'for': ['csv'] }

" Dart
Plug 'dart-lang/dart-vim-plugin', { 'for': ['dart'] }

" Docker
Plug 'ekalinin/Dockerfile.vim'

" Erlang
Plug 'vim-erlang/vim-erlang-compiler', { 'for': ['erlang'] }
Plug 'vim-erlang/vim-erlang-omnicomplete', { 'for': ['erlang'] }
Plug 'vim-erlang/vim-erlang-runtime'

" Git
Plug 'tpope/vim-git'

" Go
Plug 'mattn/vim-goimports', { 'for': ['go'] }

" HTML
Plug 'othree/html5.vim'
Plug 'mattn/emmet-vim'

" iptables
Plug 'vim-scripts/iptables'

" Java/Scala
Plug 'derekwyatt/vim-scala', { 'for': ['scala'] }
Plug 'tfnico/vim-gradle'
Plug 'derekwyatt/vim-sbt'

" JavaScript
Plug 'othree/yajs.vim'

" JSON
Plug 'elzr/vim-json'

" Lua
Plug 'tbastos/vim-lua'

" Markdown
Plug 'plasticboy/vim-markdown'

" NGINX
Plug 'chr4/nginx.vim'

" PHP
Plug 'StanAngeloff/php.vim'

" PostgreSQL
Plug 'lifepillar/pgsql.vim'

" Protobuf
Plug 'uarun/vim-protobuf'

" Python
Plug 'vim-python/python-syntax'
Plug 'sophacles/vim-bundle-mako'
Plug 'Glench/Vim-Jinja2-Syntax'

" reStructuredText
Plug 'Rykka/riv.vim', { 'for': ['rst'] }

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'keith/rspec.vim'

" Rust
Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
Plug 'racer-rust/vim-racer'

" systemd
Plug 'Matt-Deacalion/vim-systemd-syntax'

" tmux
Plug 'tmux-plugins/vim-tmux'

" TOML
Plug 'cespare/vim-toml'

" Closure Templates
Plug 'duganchen/vim-soy'

call plug#end()


""""""""""""""""""""
" Search:
""""""""""""""""""""
set ignorecase
set smartcase
set incsearch
set hlsearch

nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'
nmap <Esc><Esc> :noh<CR>


""""""""""""""""""""
" Edit:
""""""""""""""""""""
set expandtab
set smarttab
set tabstop=2
set shiftwidth=2
set shiftround

set autoindent
set smartindent
" http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash
inoremap # X<BS>#

set showmatch
" a showmatch will wait half a second or until a character is typed
set cpoptions-=m
set matchtime=3 " 0.3 secs
" set matchpairs& matchpairs+=<:>

set backspace=indent,eol,start
set completeopt=menu,preview
set virtualedit=block

set autowrite
set hidden
set infercase
set modeline

" bases Vim will consider for numbers when using Ctrl-A/Ctrl-X
set nrformats=octal,hex

autocmd MyAutoCmd InsertLeave * if &paste | setlocal nopaste | echo 'nopaste' | endif
autocmd MyAutoCmd InsertLeave * if &l:diff | diffupdate | endif


""""""""""""""""""""
" Display:
""""""""""""""""""""
" colorscheme
set background=dark
let g:hybrid_use_Xresources = 1
colorscheme hybrid

hi Pmenu ctermbg=blue
hi PmenuSel term=bold ctermfg=white ctermbg=darkred
hi PMenuSbar ctermbg=blue

" list
set list
set listchars=tab:»-,trail:-,extends:»,precedes:«,eol:$,nbsp:%

" messages
set shortmess=TI
set noshowmode

" cursorline
autocmd MyAutoCmd CursorMoved,CursorMovedI,WinLeave * setlocal nocursorline
autocmd MyAutoCmd CursorHold,CursorMovedI * setlocal cursorline

set cmdheight=2
set colorcolumn=80
set laststatus=2
set nowrap
set number


""""""""""""""""""""
" unite.vim:
""""""""""""""""""""
let g:unite_update_time = 100
let g:unite_enable_start_insert = 1
let g:unite_winheight = 15
let g:unite_enable_auto_select = 0
let g:unite_force_overwrite_statusline = 0

nmap <buffer> <ESC> <Plug>(unite_exit)
noremap <C-B> :Unite buffer<CR>
noremap <C-F> :Unite file file/new<CR>

autocmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>


""""""""""""""""""""
" vimfiler.vim:
""""""""""""""""""""
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_force_overwrite_statusline = 0
let g:vimfiler_ignore_pattern = [
    \ '^\.\(.*[\-_]\)\?cache$',
    \ '^\.git$', '^\.hg$',
    \ '^vendor$',
    \ '^__pycache__$', '\.coverage', '\.egg-info$', '\.pyc$', '^\.tox$', '^\.venv$',
    \ '^wheelhouse$',
    \ '^.DS_Store$']

nnoremap <leader>e :VimFilerExplorer -winwidth=40<CR>


""""""""""""""""""""
" vim-quickrun:
""""""""""""""""""""
let g:quickrun_config = {
    \ '_': {
    \     'runner': 'vimproc',
    \     'runner/vimproc/updatetime': 50,
    \ },
    \ '*': {
    \     'runmode': 'async:remote:vimproc',
    \     'split': 'below',
    \ }}


""""""""""""""""""""
" prabirshrestha/vim-lsp:
""""""""""""""""""""
let g:lsp_diagnostics_enabled = 0

let g:lsp_highlight_references_enabled = 1
highlight lspReference ctermfg=lightgreen

function! s:on_lsp_buffer_enabled() abort
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
endfunction

autocmd MyAutoCmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()


""""""""""""""""""""
" mattn/vim-lsp-settings:
""""""""""""""""""""

let g:lsp_settings = {
\   'clangd': {'cmd': ['clangd-8', '--background-index']},
\   'gopls': {'cmd': [lsp_settings#exec_path('gopls'), '-remote=auto']},
\ }

let g:lsp_settings_filetype_python = 'pyls-ms'


""""""""""""""""""""
" ale:
""""""""""""""""""""
let g:ale_completion_enabled = 0
let g:ale_disable_lsp = 1

let g:ale_echo_cursor = 1
let g:ale_sign_column_always = 1
let g:ale_cursor_detail = 0

let g:ale_fix_on_save = 1

" Not run lint on opening files.
let g:ale_lint_on_enter = 0
" Run lint on leaving insert mode.
let g:ale_lint_on_insert_leave = 1
" Run lint on TextChanged event, but not on TextChangedI.
let g:ale_lint_on_text_changed = 'normal'

let g:ale_c_clangformat_executable = 'clang-format-8'
let g:ale_yaml_yamllint_options='-d "{extends: default, rules: {line-length: disable}}"'


""""""""""""""""""""
" asyncomplete.vim:
""""""""""""""""""""
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'allowlist': ['*'],
    \ 'blocklist': ['unite'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
    \ 'name': 'omni',
    \ 'allowlist': ['*'],
    \ 'blocklist': ['c', 'cpp', 'html'],
    \ 'completor': function('asyncomplete#sources#omni#completor')
    \  }))

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <CR>    pumvisible() ? asyncomplete#close_popup() . "\<CR>" : "\<CR>"


""""""""""""""""""""
" matthn/vim-goimports:
""""""""""""""""""""
let g:goimports = 0  " will be run by ale


""""""""""""""""""""
" vim-json:
""""""""""""""""""""
let g:vim_json_syntax_conceal = 0


""""""""""""""""""""
" vim-markdown
""""""""""""""""""""
let g:markdown_fenced_languages = [
    \ 'css',
    \ 'coffee',
    \ 'erb=eruby.html',
    \ 'go',
    \ 'html',
    \ 'javascript',
    \ 'js=javascript',
    \ 'json=javascript',
    \ 'proto',
    \ 'python',
    \ 'ruby',
    \ 'sass',
    \ 'sh',
    \ 'xml',
    \ ]


""""""""""""""""""""
" vim-python/python-syntax:
""""""""""""""""""""

let g:python_highlight_builtin_funcs_kwarg = 0
let g:python_highlight_indent_errors = 0
let g:python_highlight_space_errors = 0
let g:python_highlight_func_calls = 0
let g:python_highlight_all = 1  " enable all highlighting except for the above


""""""""""""""""""""
" riv.vim:
""""""""""""""""""""
let g:riv_file_link_style = 2 " Sphinx

let g:riv_fold_level = 3  " Sections,Lists and Blocks.
let g:riv_fold_blank = 1  " fold all blank lines, show one if more than one.


""""""""""""""""""""
" rust.vim:
""""""""""""""""""""
let g:rustfmt_autosave = 1


""""""""""""""""""""
" vim-racer:
""""""""""""""""""""
let g:racer_experimental_completer = 1

autocmd FileType rust nmap gd <Plug>(rust-def)
autocmd FileType rust nmap gs <Plug>(rust-def-split)
autocmd FileType rust nmap gx <Plug>(rust-def-vertical)
autocmd FileType rust nmap <leader>gd <Plug>(rust-doc)
